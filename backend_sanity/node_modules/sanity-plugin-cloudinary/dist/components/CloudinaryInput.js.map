{"version":3,"sources":["../../src/components/CloudinaryInput.tsx"],"names":["CloudinaryInput","props","showSettings","setShowSettings","namespace","secrets","handleSelect","payload","assets","asset","onChange","type","value","PatchEvent","from","Object","assign","_type","name","_version","_key","action","cloudName","apiKey"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAKA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,eAAe,GAAIC,KAAD,IAAkB;AAAA,kBACA,qBAAS,KAAT,CADA;AAAA;AAAA,MACjCC,YADiC;AAAA,MACnBC,eADmB;;AAAA,oBAEpB,+BAAoBC,4BAApB,CAFoB;AAAA,MAEhCC,OAFgC,eAEhCA,OAFgC;;AAIxC,MAAMC,YAAY,GAAIC,OAAD,IAAkC;AAAA,yCACrCA,OAAO,CAACC,MAD6B;AAAA,QAC9CC,KAD8C;;AAErD,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAJoD,QAM7CC,QAN6C,GAM1BT,KAN0B,CAM7CS,QAN6C;AAAA,QAMnCC,IANmC,GAM1BV,KAN0B,CAMnCU,IANmC;AAOrD,QAAMC,KAAK,GAAGX,KAAK,CAACW,KAAN,IAAe,EAA7B;AACAF,IAAAA,QAAQ,CACNG,oBAAWC,IAAX,CAAgB,CACd,qBACEC,MAAM,CAACC,MAAP;AAEIC,MAAAA,KAAK,EAAEN,IAAI,CAACO,IAFhB;AAGIC,MAAAA,QAAQ,EAAE;AAHd,OAIQP,KAAK,CAACQ,IAAN,GAAa;AAAEA,MAAAA,IAAI,EAAER,KAAK,CAACQ;AAAd,KAAb,GAAoC;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAJ5C,GAMEX,KANF,CADF,CADc,CAAhB,CADM,CAAR;AAcD,GAtBD;;AAwBA,MAAMY,MAAM,GAAGhB,OAAO,GAClB,MACE,8BACEA,OAAO,CAACiB,SADV,EAEEjB,OAAO,CAACkB,MAFV,EAGE,KAHF,EAGS;AACPjB,EAAAA,YAJF,EAKEL,KAAK,CAACW,KALR,CAFgB,GASlB,MAAMT,eAAe,CAAC,IAAD,CATzB;AAWA,sBACE,4DACGD,YAAY,iBACX,6BAAC,0BAAD;AAAmB,IAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,KAAD;AAAjD,IAFJ,eAIE,6BAAC,oBAAD;AACE,IAAA,OAAO,EAAE,MAAMA,eAAe,CAAC,IAAD,CADhC;AAEE,IAAA,iBAAiB,EAAEkB;AAFrB,KAGMpB,KAHN,EAJF,CADF;AAYD,CAnDD;;eAqDeD,e","sourcesContent":["import React, { useState } from 'react';\nimport WidgetInput from './WidgetInput';\nimport { nanoid } from 'nanoid';\nimport PatchEvent, {\n  set,\n  setIfMissing,\n} from 'part:@sanity/form-builder/patch-event';\nimport { CloudinaryAsset } from '../schema/cloudinaryAsset';\nimport { useSecrets } from 'sanity-secrets';\nimport { InsertHandlerParams } from '../typings';\nimport { openMediaSelector } from '../utils';\nimport SecretsConfigView, { Secrets, namespace } from './SecretsConfigView';\n\ntype Props = {\n  type: Record<string, any>;\n  onChange: (patches: any) => void;\n  value: CloudinaryAsset;\n  level: number;\n  readOnly: boolean;\n  markers: any;\n  presence: any[];\n};\n\nconst CloudinaryInput = (props: Props) => {\n  const [showSettings, setShowSettings] = useState(false);\n  const { secrets } = useSecrets<Secrets>(namespace);\n\n  const handleSelect = (payload: InsertHandlerParams) => {\n    const [asset] = payload.assets;\n    if (!asset) {\n      return;\n    }\n\n    const { onChange, type } = props;\n    const value = props.value || {};\n    onChange(\n      PatchEvent.from([\n        set(\n          Object.assign(\n            {\n              _type: type.name,\n              _version: 1,\n              ...(value._key ? { _key: value._key } : { _key: nanoid() }),\n            },\n            asset\n          )\n        ),\n      ])\n    );\n  };\n\n  const action = secrets\n    ? () =>\n        openMediaSelector(\n          secrets.cloudName,\n          secrets.apiKey,\n          false, // single selection\n          handleSelect,\n          props.value\n        )\n    : () => setShowSettings(true);\n\n  return (\n    <>\n      {showSettings && (\n        <SecretsConfigView onClose={() => setShowSettings(false)} />\n      )}\n      <WidgetInput\n        onSetup={() => setShowSettings(true)}\n        openMediaSelector={action}\n        {...props}\n      />\n    </>\n  );\n};\n\nexport default CloudinaryInput;\n"],"file":"CloudinaryInput.js"}