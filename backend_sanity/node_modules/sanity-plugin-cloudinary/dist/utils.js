"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assetUrl = assetUrl;
exports.loadJS = loadJS;
exports.openMediaSelector = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var widgetSrc = 'https://media-library.cloudinary.com/global/all.js';

function assetUrl(asset) {
  if (asset.derived && asset.derived.length > 0) {
    var _asset$derived = _slicedToArray(asset.derived, 1),
        derived = _asset$derived[0];

    if (derived.secure_url) {
      return derived.secure_url;
    }

    return derived.url;
  }

  if (asset.secure_url) {
    return asset.secure_url;
  }

  return asset.url;
}

var openMediaSelector = (cloudName, apiKey, multiple, insertHandler, selectedAsset) => {
  loadJS(widgetSrc, () => {
    var options = {
      cloud_name: cloudName,
      api_key: apiKey,
      insert_caption: 'Select',
      multiple
    };

    if (selectedAsset) {
      options.asset = {
        public_id: selectedAsset.public_id,
        type: selectedAsset.type,
        resource_type: selectedAsset.resource_type
      };
    }

    window.cloudinary.openMediaLibrary(options, {
      insertHandler
    });
  });
};

exports.openMediaSelector = openMediaSelector;

function loadJS(url, callback) {
  var existingScript = document.getElementById('damWidget');

  if (!existingScript) {
    var script = document.createElement('script');
    script.src = url;
    script.id = 'damWidget';
    document.body.appendChild(script);

    script.onload = () => {
      if (callback) {
        return callback();
      }

      return true;
    };
  }

  if (existingScript && callback) {
    return callback();
  }

  return true;
}
//# sourceMappingURL=utils.js.map