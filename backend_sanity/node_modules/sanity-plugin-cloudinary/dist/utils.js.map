{"version":3,"sources":["../src/utils.ts"],"names":["widgetSrc","assetUrl","asset","derived","length","secure_url","url","openMediaSelector","cloudName","apiKey","multiple","insertHandler","selectedAsset","loadJS","options","cloud_name","api_key","insert_caption","public_id","type","resource_type","window","cloudinary","openMediaLibrary","callback","existingScript","document","getElementById","script","createElement","src","id","body","appendChild","onload"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,SAAS,GAAG,oDAAlB;;AAEO,SAASC,QAAT,CAAkBC,KAAlB,EAA0C;AAC/C,MAAIA,KAAK,CAACC,OAAN,IAAiBD,KAAK,CAACC,OAAN,CAAcC,MAAd,GAAuB,CAA5C,EAA+C;AAAA,wCAC3BF,KAAK,CAACC,OADqB;AAAA,QACtCA,OADsC;;AAE7C,QAAIA,OAAO,CAACE,UAAZ,EAAwB;AACtB,aAAOF,OAAO,CAACE,UAAf;AACD;;AACD,WAAOF,OAAO,CAACG,GAAf;AACD;;AACD,MAAIJ,KAAK,CAACG,UAAV,EAAsB;AACpB,WAAOH,KAAK,CAACG,UAAb;AACD;;AACD,SAAOH,KAAK,CAACI,GAAb;AACD;;AAEM,IAAMC,iBAAiB,GAAG,CAC/BC,SAD+B,EAE/BC,MAF+B,EAG/BC,QAH+B,EAI/BC,aAJ+B,EAK/BC,aAL+B,KAM5B;AACHC,EAAAA,MAAM,CAACb,SAAD,EAAY,MAAM;AACtB,QAAMc,OAA4B,GAAG;AACnCC,MAAAA,UAAU,EAAEP,SADuB;AAEnCQ,MAAAA,OAAO,EAAEP,MAF0B;AAGnCQ,MAAAA,cAAc,EAAE,QAHmB;AAInCP,MAAAA;AAJmC,KAArC;;AAOA,QAAIE,aAAJ,EAAmB;AACjBE,MAAAA,OAAO,CAACZ,KAAR,GAAgB;AACdgB,QAAAA,SAAS,EAAEN,aAAa,CAACM,SADX;AAEdC,QAAAA,IAAI,EAAEP,aAAa,CAACO,IAFN;AAGdC,QAAAA,aAAa,EAAER,aAAa,CAACQ;AAHf,OAAhB;AAKD;;AAEDC,IAAAA,MAAM,CAACC,UAAP,CAAkBC,gBAAlB,CAAmCT,OAAnC,EAA4C;AAAEH,MAAAA;AAAF,KAA5C;AACD,GAjBK,CAAN;AAkBD,CAzBM;;;;AA2BA,SAASE,MAAT,CAAgBP,GAAhB,EAA6BkB,QAA7B,EAAmD;AACxD,MAAMC,cAAc,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAvB;;AACA,MAAI,CAACF,cAAL,EAAqB;AACnB,QAAMG,MAAM,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAf;AACAD,IAAAA,MAAM,CAACE,GAAP,GAAaxB,GAAb;AACAsB,IAAAA,MAAM,CAACG,EAAP,GAAY,WAAZ;AACAL,IAAAA,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BL,MAA1B;;AACAA,IAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACpB,UAAIV,QAAJ,EAAc;AACZ,eAAOA,QAAQ,EAAf;AACD;;AACD,aAAO,IAAP;AACD,KALD;AAMD;;AACD,MAAIC,cAAc,IAAID,QAAtB,EAAgC;AAC9B,WAAOA,QAAQ,EAAf;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import { CloudinaryAsset } from './schema/cloudinaryAsset';\nimport { InsertHandlerParams } from './typings';\n\nconst widgetSrc = 'https://media-library.cloudinary.com/global/all.js';\n\nexport function assetUrl(asset: CloudinaryAsset) {\n  if (asset.derived && asset.derived.length > 0) {\n    const [derived] = asset.derived;\n    if (derived.secure_url) {\n      return derived.secure_url;\n    }\n    return derived.url;\n  }\n  if (asset.secure_url) {\n    return asset.secure_url;\n  }\n  return asset.url;\n}\n\nexport const openMediaSelector = (\n  cloudName: string,\n  apiKey: string,\n  multiple: boolean,\n  insertHandler: (params: InsertHandlerParams) => void,\n  selectedAsset?: CloudinaryAsset\n) => {\n  loadJS(widgetSrc, () => {\n    const options: Record<string, any> = {\n      cloud_name: cloudName,\n      api_key: apiKey,\n      insert_caption: 'Select',\n      multiple,\n    };\n\n    if (selectedAsset) {\n      options.asset = {\n        public_id: selectedAsset.public_id,\n        type: selectedAsset.type,\n        resource_type: selectedAsset.resource_type,\n      };\n    }\n\n    window.cloudinary.openMediaLibrary(options, { insertHandler });\n  });\n};\n\nexport function loadJS(url: string, callback: () => void) {\n  const existingScript = document.getElementById('damWidget');\n  if (!existingScript) {\n    const script = document.createElement('script');\n    script.src = url;\n    script.id = 'damWidget';\n    document.body.appendChild(script);\n    script.onload = () => {\n      if (callback) {\n        return callback();\n      }\n      return true;\n    };\n  }\n  if (existingScript && callback) {\n    return callback();\n  }\n  return true;\n}\n"],"file":"utils.js"}